```json
{"exec-mode":"default","platform":"iOS","uti":"com.xamarin.workbook","packages":[]}
```

# Understanding your iOS Application

When you open an iOS application on your device, what you are seeing is a number of components all working together to give you a slick experience and the perception of one single View. In this guide we will interactively explore the make up of an iOS application, allowing you to get a deeper understanding of its functionality.

The most fundamental object of an iOS app and first thing your user will see is a window. You can think of this window as a shop front. We have one Window, or screen, that allows your user to view the app. We can add whatever we want to the window, but we almost always only use one Main window.

To create a new Window we first need to declare a new instance of `UIWindow`, and then we need to make that window visible:

```csharp
var window = new UIWindow(UIScreen.MainScreen.Bounds);
window.MakeKeyAndVisible()
```

If you inspect the simulator now, you’ll notice a blank white screen. We don’t actually have anything visible on the screen, so let’s start creating something.

An iOS application uses a View Controller to manage all the views within it – it loads and disposes the views, it handles user interactions with the views, and it co-ordinates with other objects. There can be many View Controllers, of many types (eg. `TableViewController`), within one application, all of which work together. Let’s start by creating a single UIViewController:

```csharp
var controller = new UIViewController()
```

We mentioned earlier that most applications have a single Window. Every Window has a single **Root View Controller**, and this is the first View Controller that your user will see and interact with.

Let’s set our recently created View Controller, to be window’s RootViewController:

```csharp
window.RootViewController = controller
```

```csharp
controller.View.BackgroundColor = UIColor.Magenta
```

Remember, we can’t set the color of the actual View Controller itself, it’s just an object that manages, and we can’t actually see it.

###### Try it yourself!

* See if you can change the color of the background to something different

* Can you change it to an RBG value? *(Hint: Create a new instance of UIColor, assign Red, Blue, Green, and alpha nfloat values, and set the background to the new instance)*

So, we are starting to see how the View Heirarchy of iOS apps work. Having something to look at on the screen is nice, but usually users want to interact with their apps by navigating through them. To do this we can use a Navigation Controller. As suggested by the name, it manages the navigation of your application. A navigation controller is a UI-less controller that will manage a stack of however many View Controller that you add to it.

Let’s add one to our app:

```csharp
var navigationController = new UINavigationController();
```

You should notice that nothing happens! This is because our RootViewController still thinks that controller is the first thing it should be showing us. Let’s amend this to set the RootViewController as our NavigationController.

```csharp
window.RootViewController = navigationController
```

###### Try it now

* Pass the View Controller (controller) into the newly created instance of our navigation controller. You can pass this as an argument in the code above.

Next, let’s change some of the View Controller’s properties to allow the app to be more user friendly. We can set the Navigation Item’s title to be anything we want. You can update the string below to give the title a name that you think is suitable:

```csharp
controller.NavigationItem.Title = "iOS is Cool"
```

### Building the View Heirarchy

Now, we have a ViewContoller which is the first ViewController in our Navigation Stack and we’ve set this as our RootViewController (this first thing that the user will see). Now, let’s allow our user to interact with our application by adding UI *controls* to our View.

We’ll start by creating a text box:

```csharp
var name =  new UITextField{ Placeholder = "Enter Name", BorderStyle = UITextBorderStyle.RoundedRect, Frame = new CGRect(10, 80, controller.View.Bounds.Width -20, 31.0f)}
```

Notice that when we create a control, such as a UITextField, we declare a `Frame`property.  This property defines the the location and size of the control. In iOS the 0,0 coordinate is in the upper left with \+ x to the right and \+y down.

Next, let’s add this control to the ViewController’s view as a **subview**, so that it will display in our app

```csharp
controller.View.AddSubview(name)
```

Let’s add another few Text Fields and a button:

```csharp
var email =  new UITextField{ Placeholder = "Enter Email", BorderStyle = UITextBorderStyle.RoundedRect, KeyboardType = UIKeyboardType.EmailAddress, Frame = new CGRect(10, 120, controller.View.Bounds.Width -20, 31.0f)};
var password = new UITextField{ Placeholder = "Enter Password", BorderStyle = UITextBorderStyle.RoundedRect, SecureTextEntry = true, Frame = new CGRect(10, 160, controller.View.Bounds.Width - 20, 31.0f)};
var enterButton = UIButton.FromType(UIButtonType.System);
enterButton.Frame = new CGRect(10, 200, controller.View.Bounds.Width - 20, 31.0f);
enterButton.SetTitle ("Submit", UIControlState.Normal);
```

Once they have been created, we have to add these controls to the view. We can add multiple subviews to the view hierarchy by using `AddSubviews` and passing in an array of UIViews that includes all our views:

```csharp
controller.View.AddSubviews(new UIView[]{email, password, enterButton})
```

### Try it now:

* Set the **KeyboardType **property of the email TextField to** **`EmailAddress`

* Adjust the appearance of the Button. For example, you could try to change the background color of the button, or you could adjust the corner radius of its layer to make the corners rounded.

