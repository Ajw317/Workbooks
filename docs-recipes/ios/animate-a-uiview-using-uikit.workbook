```json
{"exec-mode":"default","platform":"iOS","uti":"com.xamarin.workbook","packages":[]}
```

# Animate a UIView using UIKit

This recipe shows how to animate a UIView using UIKit. In this case it shows how to animate a UIImageView, but the same technique can be applied to any UIView.

First, we’ll need to use the following namespaces, so make sure you reference them:

```csharp
using System;
using System.Drawing;

using Foundation;
using UIKit;
using ObjCRuntime;
using CoreGraphics;
```

Create a new subclass of `UIViewController `called `AnimationViewController:`

```csharp
public class AnimationViewController : UIViewController{}
```

Set this new view controller as the rootviewcontroller, and set it to be the size of the screen bounds.

```csharp
var aVC = new AnimationViewController();
KeyWindow.RootViewController = aVC;
aVC.View.BackgroundColor = UIColor.White;
```

In a UIViewController subclass create class variables for a *UIImageView*, *UIImage* and *CGPoint:*

```csharp
UIImageView imageView;
UIImage image;
CGPoint pt;
```

Create the UIImageView, assign it a UIImage and at it as a subview.

```csharp
imageView = new UIImageView(new CGRect(20, 10, 50, 50));
image = UIImage.FromFile("animation1.png");
imageView.Image = image;
aVC.View.AddSubview(imageView);
```

Add the imageView to the View controllers view:

```csharp
aVC.View.AddSubview(imageView);
```

Set the point to the Center property of the UIImageView.

```csharp
pt = imageView.Center;
```

Begin the animation on the UIView, make a call to `UIView.BeginAnimations`, followed by setting animation properties.

```csharp
UIView.BeginAnimations ("slideAnimation");

UIView.SetAnimationDuration (2);
UIView.SetAnimationCurve (UIViewAnimationCurve.EaseInOut);
UIView.SetAnimationRepeatCount (2);
UIView.SetAnimationRepeatAutoreverses (true);
```

Set the animation’s Delegate and declare the selector (function name) to call when the animation stops.

```csharp
UIView.SetAnimationDelegate (aVC);
UIView.SetAnimationDidStopSelector (new Selector ("animationDidStop:finished:context:"));
```

Set the Center property of the UIImageView to the point where it will animate to and call `UIView.CommitAnimations`.

```csharp
var xpos = UIScreen.MainScreen.Bounds.Right - imageView.Frame.Width / 2;
var ypos = imageView.Center.Y;

imageView.Center = new CGPoint (xpos, ypos);
```

Implement the function from two steps agao, setting `image.Center` to the original point.

```csharp
[Export("animationDidStop:finished:context:")]
void SlideStopped (NSString animationID, NSNumber finished, NSObject context)
{
    imageView.Center = pt;
}
```