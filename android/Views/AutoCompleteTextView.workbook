---
uti: com.xamarin.workbook
platform: Android
packages: []
---

# AutoCompleteTextView

This guide will demonstrate how to use an AutoCompleteTextView in an Android application. An AutoCompleteTextView will display a list of suggestions that match the text a user has entered into a TextView.

First, let’s import the necessary namespaces that we need, and declare a String array that holds the names of some monkeys.

```csharp
using System;
using Android.App;
using Android.Util;
using Android.Views;
using Android.Widget;

// Get a reference to the Activity.
Activity activity = StartedActivities.First();

// A small list of some different types of monkeys
static string[] MONKEYS = new string[] { "Allen's swamp monkey",
  "Black capuchin", "Black-headed marmoset", "Black-headed night monkey", "Black-shanked douc", 
  "Cotton top tamarin",
  "Drill",
  "Gee's golden lemur", "Geoffrey's tamarin", "Gelada", "Golden lion Tamarin", "Grivet", 
  "Japanese macaque", 
  "Lesula", 
  "Mandril", 
  "Yellow baboon"
};
```

Next, let’s calculate the padding values for out views. The `SetPadding` method takes values that are in pixels (PX), but it’s better to express padding in *density-independent pixels* (DP). So, let’s  write a method that will convert a DP value to  pixels:

```csharp
int DP2Pixel(int dpValue)
{
    float density = activity.Resources.DisplayMetrics.Density;
    int paddingDP = (int) (dpValue * density);
    return paddingDP; 
}

int paddingLeft = DP2Pixel(10);
int paddingRight = paddingLeft;
int paddingTop = DP2Pixel(40);
int paddingBottom = 0;
```

Finally, create the layout programatically. We’ll have a LinearLayout that holds a TextView and the AutoCompleteTextView, and add that ViewGroup to the Activity:

```csharp

// Add a linear layout for the Activity
LinearLayout rootLayout = new LinearLayout(activity);
rootLayout.Orientation = Orientation.Horizontal;
rootLayout.LayoutParameters = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MatchParent, LinearLayout.LayoutParams.MatchParent);

// Add a label
TextView label = new TextView(activity);
label.SetPadding(paddingLeft, paddingTop, 0, 0);
label.Text = "Monkey:";
rootLayout.AddView(label);

// Add the AutoCompleteTextView
AutoCompleteTextView actv = new AutoCompleteTextView(activity);
actv.LayoutParameters = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MatchParent, LinearLayout.LayoutParams.WrapContent);
actv.SetPadding(paddingLeft, paddingTop, paddingRight, paddingBottom);
rootLayout.AddView(actv);

// Finally, add evertyhing to the Activity.
activity.SetContentView(rootLayout);

```

The drop down list that an AutoCompleteTextView displays it’s choices requires an Adapter. The final step in this Workbook is to provide an Adapter instance to the view:

```csharp
actv.Adapter = new ArrayAdapter<string>(activity, Android.Resource.Layout.SimpleListItem1, MONKEYS);
```

